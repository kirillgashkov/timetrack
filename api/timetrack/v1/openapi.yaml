openapi: 3.0.3

info:
  title: TimeTrack
  version: 0.0.0

paths:
  /auth:
    description: Get access token.
    post:
      tags: [auth]
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordGrant"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Error.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Error"


  /health:
    get:
      tags: [other]
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /users/:
    post:
      tags: [users]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "503":
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags: [users]
      security:
          - bearerAuth: []
      parameters:
        - in: query
          name: filter
          schema:
            type: array
            items:
              type: string
          required: false
          description: Filter by user fields. Can be used multiple times.
          examples:
            example2:
              value: "name=Ivan"
            example1:
              value: "surname=Ivanov"
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          required: false
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      tags: [users]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      tags: [users]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags: [users]
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /users/current:
    get:
      tags: [users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/:
    post:
      tags: [tasks]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreate"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags: [tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          required: false
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/{id}:
    get:
      tags: [tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      tags: [tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdate"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags: [tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/{id}/start:
    post:
      tags: [tracking]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "204":
          description: No content.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/{id}/stop:
    post:
      tags: [tracking]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        "204":
          description: No content.
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/report:
    post:
      tags: [reporting]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportIn"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportTask"
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: OAuth 2.0

  schemas:
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string

    Health:
      type: object
      required: [status]
      properties:
        status:
          type: string

    User:
      type: object
      required: [id, passportNumber, surname, name, address]
      properties:
        id:
          type: integer
        passportNumber:
          type: string
        surname:
          type: string
        name:
          type: string
        patronymic:
          type: string
        address:
          type: string

    UserCreate:
      type: object
      required: [passportNumber]
      properties:
        passportNumber:
          type: string

    UserUpdate:
        type: object
        properties:
          passportNumber:
            type: string
          surname:
            type: string
          name:
            type: string
          patronymic:
            type: string
          patronymicNull:
            type: boolean
          address:
            type: string
    Task:
      type: object
      required: [id, description]
      properties:
        id:
          type: integer
        description:
          type: string

    TaskCreate:
      type: object
      required: [description]
      properties:
        description:
          type: string

    TaskUpdate:
      type: object
      properties:
        description:
          type: string

    ReportIn:
      type: object
      required: [from, to]
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time

    ReportDuration:
      type: object
      required: [hours, minutes]
      properties:
        hours:
          type: integer
        minutes:
          type: integer

    ReportTask:
      type: object
      required: [id, description, start, stop]
      properties:
        task:
          $ref: "#/components/schemas/Task"
        duration:
          $ref: "#/components/schemas/ReportDuration"

    PasswordGrant:
      description: Password grant (https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
      type: object
      required: [grant_type, username, password]
      properties:
        grant_type:
          type: string
          enum: [password]
        username:
          type: string
        password:
          type: string
          format: password

    Token:
      description: Token (https://datatracker.ietf.org/doc/html/rfc6749#section-5.1).
      type: object
      required: [access_token, token_type]
      properties:
        access_token:
          type: string
        token_type:
          type: string
          enum: [Bearer]

